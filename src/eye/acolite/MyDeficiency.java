/*
 * MyDeficiency.java
 *
 */

package eye.acolite;

import static eye.acolite.Acolite.forceFileNameExtension;
import static eye.acolite.Acolite.loadImage;
import java.awt.BorderLayout;
import java.awt.CheckboxMenuItem;
import java.awt.Image;
import java.awt.MenuItem;
import java.awt.image.BufferedImage;
import java.io.File;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.JDialog;
import javax.swing.JOptionPane;



public class MyDeficiency extends javax.swing.JPanel {
    double angle, major, minor, tes, sIndex, cIndex;
    private Acolite.Simulation currentSimulation = Acolite.Simulation.normal;
    private Simulator simulator = new Simulator();
    private Image deutanPanel= loadImage("deutanpanel.png");
    private Image protanPanel= loadImage("protanpanel.png");
    private Image tritanPanel= loadImage("tritanpanel.png");
    private boolean currentlySavingImage = false;
    private CheckboxMenuItem normalMenuItem = new CheckboxMenuItem();
    private CheckboxMenuItem deutanMenuItem = new CheckboxMenuItem();
    private CheckboxMenuItem protanMenuItem = new CheckboxMenuItem();
    private CheckboxMenuItem tritanMenuItem = new CheckboxMenuItem();
    private MenuItem saveMenuItem = new MenuItem();
    private MenuItem aboutMenuItem = new MenuItem();
    private MenuItem dichotomousTestMenuItem = new MenuItem();
    private MenuItem myDeficiencyMenuItem = new MenuItem();
    private static final long SLEEP_BEFORE_SCREENSHOT_MILLISECONDS = 300;
    enum Simulation {

        normal, deutan, protan, tritan
    }
    
    public MyDeficiency() {
        initComponents();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        angleLabel = new javax.swing.JLabel();
        majorLabel = new javax.swing.JLabel();
        majorField = new javax.swing.JTextField();
        angleField = new javax.swing.JTextField();
        minorLabel = new javax.swing.JLabel();
        minorField = new javax.swing.JTextField();
        TESLabel = new javax.swing.JLabel();
        TESField = new javax.swing.JTextField();
        SIndexLabel = new javax.swing.JLabel();
        SIndexField = new javax.swing.JTextField();
        CIndexLabel = new javax.swing.JLabel();
        CIndexField = new javax.swing.JTextField();
        simulateButton = new javax.swing.JButton();

        angleLabel.setText("Angle");

        majorLabel.setText("Major");

        majorField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                majorFieldActionPerformed(evt);
            }
        });

        angleField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                angleFieldActionPerformed(evt);
            }
        });

        minorLabel.setText("Minor");

        minorField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                minorFieldActionPerformed(evt);
            }
        });

        TESLabel.setText("TES");

        TESField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TESFieldActionPerformed(evt);
            }
        });

        SIndexLabel.setText("S-Index");

        SIndexField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SIndexFieldActionPerformed(evt);
            }
        });

        CIndexLabel.setText("C-Index");

        CIndexField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CIndexFieldActionPerformed(evt);
            }
        });

        simulateButton.setText("Simulate");
        simulateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                simulateButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(minorField, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(minorLabel)
                    .addComponent(angleField, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(majorField, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(majorLabel)
                    .addComponent(angleLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 31, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(CIndexField, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(CIndexLabel)
                    .addComponent(TESField, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(SIndexField, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(SIndexLabel)
                    .addComponent(TESLabel))
                .addGap(20, 20, 20))
            .addGroup(layout.createSequentialGroup()
                .addGap(266, 266, 266)
                .addComponent(simulateButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(60, 60, 60)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(TESLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(TESField, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(SIndexLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(SIndexField, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(CIndexLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(CIndexField, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(angleLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(angleField, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(majorLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(majorField, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(minorLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(minorField, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                .addComponent(simulateButton)
                .addGap(25, 25, 25))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void majorFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_majorFieldActionPerformed
        //String major = majorField.getText();
    }//GEN-LAST:event_majorFieldActionPerformed

    private void angleFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_angleFieldActionPerformed
        //String angle = angleField.getText();
    }//GEN-LAST:event_angleFieldActionPerformed

    private void minorFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_minorFieldActionPerformed
        //String minor = minorField.getText();
    }//GEN-LAST:event_minorFieldActionPerformed

    private void TESFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TESFieldActionPerformed
        //String tes = TESField.getText();
    }//GEN-LAST:event_TESFieldActionPerformed

    private void SIndexFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SIndexFieldActionPerformed
        //String sIndex = SIndexField.getText();
    }//GEN-LAST:event_SIndexFieldActionPerformed

    private void CIndexFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CIndexFieldActionPerformed
        //String cIndex = CIndexField.getText();
    }//GEN-LAST:event_CIndexFieldActionPerformed

    private void simulateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_simulateButtonActionPerformed
            angle = Double.parseDouble(angleField.getText());
            major = Double.parseDouble(majorField.getText());
            minor = Double.parseDouble(minorField.getText());
            tes = Double.parseDouble(TESField.getText());
            sIndex = Double.parseDouble(SIndexField.getText());
            cIndex = Double.parseDouble(CIndexField.getText());
            
        try {
              //angles
              if (angle > 0.7){
                   simulate(Acolite.Simulation.protan);
              }
              else if(angle < 0.7 && angle > -65){
                   simulate(Acolite.Simulation.deutan);
              }
              else if(angle < -65){
                   simulate(Acolite.Simulation.tritan);
              }
        } catch (Exception ex) {
            
        }
            
    }//GEN-LAST:event_simulateButtonActionPerformed
  
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField CIndexField;
    private javax.swing.JLabel CIndexLabel;
    private javax.swing.JTextField SIndexField;
    private javax.swing.JLabel SIndexLabel;
    private javax.swing.JTextField TESField;
    private javax.swing.JLabel TESLabel;
    private javax.swing.JTextField angleField;
    private javax.swing.JLabel angleLabel;
    private javax.swing.JTextField majorField;
    private javax.swing.JLabel majorLabel;
    private javax.swing.JTextField minorField;
    private javax.swing.JLabel minorLabel;
    private javax.swing.JButton simulateButton;
    // End of variables declaration//GEN-END:variables

    private void simulate(Acolite.Simulation simulationType) {
        try {
            // remember the current simulation
            this.currentSimulation = simulationType;

            this.updateMenuState();

            // take a screenshot, simulate and show the result
            this.simulator.simulate(simulationType);
            switch (simulationType) {
                case deutan:
                    this.simulateAndShow(this.deutanPanel);
                    break;
                case protan:
                    this.simulateAndShow(this.protanPanel);
                    break;
                case tritan:
                    this.simulateAndShow(this.tritanPanel);
                    break;
            }
        } catch (Exception exc) {
            exc.printStackTrace();
            this.switchToNormalVision();
        }
    }
    
    private void updateMenuState() {

        // make sure only one menu item is checked
        this.normalMenuItem.setState(this.currentSimulation == Acolite.Simulation.normal);
        this.deutanMenuItem.setState(this.currentSimulation == Acolite.Simulation.deutan);
        this.protanMenuItem.setState(this.currentSimulation == Acolite.Simulation.protan);
        this.tritanMenuItem.setState(this.currentSimulation == Acolite.Simulation.tritan);

        // disable menu items if the Save dialog is in the foreground.
        this.normalMenuItem.setEnabled(!this.currentlySavingImage);
        this.deutanMenuItem.setEnabled(!this.currentlySavingImage);
        this.protanMenuItem.setEnabled(!this.currentlySavingImage);
        this.tritanMenuItem.setEnabled(!this.currentlySavingImage);
        this.aboutMenuItem.setEnabled(!this.currentlySavingImage);

        // Save item is disabled when we are not currently showing a simulation.
        // It is also disabled when the save-as dialog is currently open.
        this.saveMenuItem.setEnabled(this.currentSimulation != Acolite.Simulation.normal && !this.currentlySavingImage);

        // change the title of the save item to the current simulation.
        String saveMenuLabel;
        if (this.currentSimulation != Acolite.Simulation.normal) {
            saveMenuLabel = "Save " + this.currentSimulationName() + " Image...";
        } else {
            saveMenuLabel = "Save Filtered Screen Image...";
        }
        this.saveMenuItem.setLabel(saveMenuLabel);
    }
    

private void simulateAndShow(Image panel) {

        try {
            // wait for a few milliseconds until the menu has faded out.
            Thread.sleep(SLEEP_BEFORE_SCREENSHOT_MILLISECONDS);

            final boolean simulationVisible = Screen.getScreens().size() > 0;

            // detect all attached screens
            if (!simulationVisible) {
                Screen.detectScreens();
            }

            // simulate color-impaired vision for all attached screens
            for (Screen screen : Screen.getScreens()) {

                // don't take a screenshot when a color-impaired simulation 
                // is currently visible. Instead, use the same screenshot again.
                if (!simulationVisible) {
                    screen.takeScreenshot();
                }

                // apply a simulation filter to the screenshot
                BufferedImage img = this.simulator.filter(screen.screenshotImage);
                //img = computeDifference(img, screen.screenshotImage);

                // ImageIO.write(img, "png", new File("screen" + Screen.getScreens().indexOf(screen) + ".png"));

                // show the result of the simulation in a window
                screen.showSimulationImageMyD(img, this, panel);
            }
        } catch (Exception e) {
            e.printStackTrace();
            try {
                this.switchToNormalVision();
            } catch (Exception exc) {
            }
            showErrorMessage(e.getMessage(), false);
            e.printStackTrace();
        }

    }

public void switchToNormalVision() {
        // remember the current simulation
        this.currentSimulation = Acolite.Simulation.normal;

        this.updateMenuState();

        // hide the window
        this.hideSimulation();
    }
private void saveMenuItemActionPerformed(java.awt.event.ActionEvent evt) {
        this.currentlySavingImage = true;
        try {

            // first get the simulation image
            int screenID = 0; // default is the first screen
            final int screenCount = Screen.getScreens().size();
            if (screenCount > 1) {
                // ask the user for the screen to save when there is more than one
                ArrayList<String> screenNames = new ArrayList<String>(screenCount);
                for (int i = 1; i <= screenCount; i++) {
                    screenNames.add("Screen " + i);
                }
                String screenName = (String) JOptionPane.showInputDialog(null,
                        "Select a Screen:",
                        "Save Filtered Screen Image",
                        JOptionPane.QUESTION_MESSAGE, null,
                        screenNames.toArray(), null);
                if (screenName == null) {
                    return; // user canceled
                }
                screenID = screenNames.indexOf(screenName);
            }
            Image simImg = Screen.getScreens().get(screenID).simulationWindow.getImage();

            // then hide and release the simulation windows
            this.hideSimulation();
            if (simImg == null) {
                throw new Exception("No image to save.");
            }

            // construct file name
            String fileName = this.currentSimulationName() + ".png";

            // disable menu items
            this.updateMenuState();

            // ask user for file to save the image
            String filePath = Acolite.askFile(null, "Save Image", fileName, false);
            if (filePath == null) {
                return;
            }

            // make sure the file has a png extension.
            filePath = forceFileNameExtension(filePath, "png");

            // write the image to a file
            ImageIO.write((BufferedImage) simImg, "png", new File(filePath));
        } catch (Exception e) {
            this.hideSimulation();
            e.printStackTrace();
            String msg = "An unexpected error occurred. \n" + e.getMessage();
            String title = "Acolite Error";
            javax.swing.JOptionPane.showMessageDialog(null, msg, title,
                    javax.swing.JOptionPane.ERROR_MESSAGE, null);
        } finally {
            this.currentlySavingImage = false;

            // re-enable menu items
            this.currentSimulation = Acolite.Simulation.normal;
            this.updateMenuState();
        }
    }

private String currentSimulationName() {
        switch (this.currentSimulation) {
            case deutan:
                return "Deuteranopia";
            case protan:
                return "Protanopia";
            case tritan:
                return "Tritanopia";
            default:
                return "";
        }
    }
private void hideSimulation() {

        for (Screen screen : Screen.getScreens()) {
            screen.hideSimulation();
        }
        Screen.getScreens().clear();

    }

static void showErrorMessage(String msg, boolean showExitButton) {

        if (msg == null || msg.trim().length() < 3) {
            msg = "An error occurred.";
        } else {
            msg = msg.trim();
        }
        String title = "Acolite Error";
        Object[] options = new Object[]{"Exit Acolite"};
        javax.swing.JOptionPane.showOptionDialog(null, msg, title,
                JOptionPane.DEFAULT_OPTION,
                javax.swing.JOptionPane.ERROR_MESSAGE,
                null,
                showExitButton ? options : null,
                showExitButton ? options[0] : null);
    }
}